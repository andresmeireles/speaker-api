// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ServiceLocator is an autogenerated mock type for the ServiceLocator type
type ServiceLocator struct {
	mock.Mock
}

type ServiceLocator_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceLocator) EXPECT() *ServiceLocator_Expecter {
	return &ServiceLocator_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: name
func (_m *ServiceLocator) Get(name string) interface{} {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ServiceLocator_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ServiceLocator_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *ServiceLocator_Expecter) Get(name interface{}) *ServiceLocator_Get_Call {
	return &ServiceLocator_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *ServiceLocator_Get_Call) Run(run func(name string)) *ServiceLocator_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServiceLocator_Get_Call) Return(_a0 interface{}) *ServiceLocator_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceLocator_Get_Call) RunAndReturn(run func(string) interface{}) *ServiceLocator_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetE provides a mock function with given fields: name
func (_m *ServiceLocator) GetE(name string) (interface{}, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetE")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceLocator_GetE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetE'
type ServiceLocator_GetE_Call struct {
	*mock.Call
}

// GetE is a helper method to define mock.On call
//   - name string
func (_e *ServiceLocator_Expecter) GetE(name interface{}) *ServiceLocator_GetE_Call {
	return &ServiceLocator_GetE_Call{Call: _e.mock.On("GetE", name)}
}

func (_c *ServiceLocator_GetE_Call) Run(run func(name string)) *ServiceLocator_GetE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServiceLocator_GetE_Call) Return(_a0 interface{}, _a1 error) *ServiceLocator_GetE_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceLocator_GetE_Call) RunAndReturn(run func(string) (interface{}, error)) *ServiceLocator_GetE_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: name, instance
func (_m *ServiceLocator) Set(name string, instance interface{}) {
	_m.Called(name, instance)
}

// ServiceLocator_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type ServiceLocator_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - name string
//   - instance interface{}
func (_e *ServiceLocator_Expecter) Set(name interface{}, instance interface{}) *ServiceLocator_Set_Call {
	return &ServiceLocator_Set_Call{Call: _e.mock.On("Set", name, instance)}
}

func (_c *ServiceLocator_Set_Call) Run(run func(name string, instance interface{})) *ServiceLocator_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *ServiceLocator_Set_Call) Return() *ServiceLocator_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceLocator_Set_Call) RunAndReturn(run func(string, interface{})) *ServiceLocator_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceLocator creates a new instance of ServiceLocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceLocator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceLocator {
	mock := &ServiceLocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
