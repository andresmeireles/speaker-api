// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	codesender "github.com/andresmeireles/speaker/internal/codesender"
	mock "github.com/stretchr/testify/mock"
)

// CodeSenderRepositorycodesender is an autogenerated mock type for the CodeSenderRepository type
type CodeSenderRepositorycodesender struct {
	mock.Mock
}

type CodeSenderRepositorycodesender_Expecter struct {
	mock *mock.Mock
}

func (_m *CodeSenderRepositorycodesender) EXPECT() *CodeSenderRepositorycodesender_Expecter {
	return &CodeSenderRepositorycodesender_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: authCode
func (_m *CodeSenderRepositorycodesender) Add(authCode codesender.AuthCode) error {
	ret := _m.Called(authCode)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(codesender.AuthCode) error); ok {
		r0 = rf(authCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CodeSenderRepositorycodesender_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type CodeSenderRepositorycodesender_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - authCode codesender.AuthCode
func (_e *CodeSenderRepositorycodesender_Expecter) Add(authCode interface{}) *CodeSenderRepositorycodesender_Add_Call {
	return &CodeSenderRepositorycodesender_Add_Call{Call: _e.mock.On("Add", authCode)}
}

func (_c *CodeSenderRepositorycodesender_Add_Call) Run(run func(authCode codesender.AuthCode)) *CodeSenderRepositorycodesender_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(codesender.AuthCode))
	})
	return _c
}

func (_c *CodeSenderRepositorycodesender_Add_Call) Return(_a0 error) *CodeSenderRepositorycodesender_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CodeSenderRepositorycodesender_Add_Call) RunAndReturn(run func(codesender.AuthCode) error) *CodeSenderRepositorycodesender_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *CodeSenderRepositorycodesender) GetAll() ([]codesender.AuthCode, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []codesender.AuthCode
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]codesender.AuthCode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []codesender.AuthCode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]codesender.AuthCode)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CodeSenderRepositorycodesender_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type CodeSenderRepositorycodesender_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *CodeSenderRepositorycodesender_Expecter) GetAll() *CodeSenderRepositorycodesender_GetAll_Call {
	return &CodeSenderRepositorycodesender_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *CodeSenderRepositorycodesender_GetAll_Call) Run(run func()) *CodeSenderRepositorycodesender_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CodeSenderRepositorycodesender_GetAll_Call) Return(_a0 []codesender.AuthCode, _a1 error) *CodeSenderRepositorycodesender_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CodeSenderRepositorycodesender_GetAll_Call) RunAndReturn(run func() ([]codesender.AuthCode, error)) *CodeSenderRepositorycodesender_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCode provides a mock function with given fields: code
func (_m *CodeSenderRepositorycodesender) GetByCode(code string) (codesender.AuthCode, error) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for GetByCode")
	}

	var r0 codesender.AuthCode
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (codesender.AuthCode, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) codesender.AuthCode); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(codesender.AuthCode)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CodeSenderRepositorycodesender_GetByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCode'
type CodeSenderRepositorycodesender_GetByCode_Call struct {
	*mock.Call
}

// GetByCode is a helper method to define mock.On call
//   - code string
func (_e *CodeSenderRepositorycodesender_Expecter) GetByCode(code interface{}) *CodeSenderRepositorycodesender_GetByCode_Call {
	return &CodeSenderRepositorycodesender_GetByCode_Call{Call: _e.mock.On("GetByCode", code)}
}

func (_c *CodeSenderRepositorycodesender_GetByCode_Call) Run(run func(code string)) *CodeSenderRepositorycodesender_GetByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CodeSenderRepositorycodesender_GetByCode_Call) Return(_a0 codesender.AuthCode, _a1 error) *CodeSenderRepositorycodesender_GetByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CodeSenderRepositorycodesender_GetByCode_Call) RunAndReturn(run func(string) (codesender.AuthCode, error)) *CodeSenderRepositorycodesender_GetByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: authCodeId
func (_m *CodeSenderRepositorycodesender) GetById(authCodeId int) (codesender.AuthCode, error) {
	ret := _m.Called(authCodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 codesender.AuthCode
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (codesender.AuthCode, error)); ok {
		return rf(authCodeId)
	}
	if rf, ok := ret.Get(0).(func(int) codesender.AuthCode); ok {
		r0 = rf(authCodeId)
	} else {
		r0 = ret.Get(0).(codesender.AuthCode)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(authCodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CodeSenderRepositorycodesender_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type CodeSenderRepositorycodesender_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - authCodeId int
func (_e *CodeSenderRepositorycodesender_Expecter) GetById(authCodeId interface{}) *CodeSenderRepositorycodesender_GetById_Call {
	return &CodeSenderRepositorycodesender_GetById_Call{Call: _e.mock.On("GetById", authCodeId)}
}

func (_c *CodeSenderRepositorycodesender_GetById_Call) Run(run func(authCodeId int)) *CodeSenderRepositorycodesender_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CodeSenderRepositorycodesender_GetById_Call) Return(_a0 codesender.AuthCode, _a1 error) *CodeSenderRepositorycodesender_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CodeSenderRepositorycodesender_GetById_Call) RunAndReturn(run func(int) (codesender.AuthCode, error)) *CodeSenderRepositorycodesender_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: authCode
func (_m *CodeSenderRepositorycodesender) Update(authCode codesender.AuthCode) error {
	ret := _m.Called(authCode)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(codesender.AuthCode) error); ok {
		r0 = rf(authCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CodeSenderRepositorycodesender_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CodeSenderRepositorycodesender_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - authCode codesender.AuthCode
func (_e *CodeSenderRepositorycodesender_Expecter) Update(authCode interface{}) *CodeSenderRepositorycodesender_Update_Call {
	return &CodeSenderRepositorycodesender_Update_Call{Call: _e.mock.On("Update", authCode)}
}

func (_c *CodeSenderRepositorycodesender_Update_Call) Run(run func(authCode codesender.AuthCode)) *CodeSenderRepositorycodesender_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(codesender.AuthCode))
	})
	return _c
}

func (_c *CodeSenderRepositorycodesender_Update_Call) Return(_a0 error) *CodeSenderRepositorycodesender_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CodeSenderRepositorycodesender_Update_Call) RunAndReturn(run func(codesender.AuthCode) error) *CodeSenderRepositorycodesender_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCodeSenderRepositorycodesender creates a new instance of CodeSenderRepositorycodesender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCodeSenderRepositorycodesender(t interface {
	mock.TestingT
	Cleanup(func())
}) *CodeSenderRepositorycodesender {
	mock := &CodeSenderRepositorycodesender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
