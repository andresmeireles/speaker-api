// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	user "github.com/andresmeireles/speaker/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// Servicecodesender is an autogenerated mock type for the Service type
type Servicecodesender struct {
	mock.Mock
}

type Servicecodesender_Expecter struct {
	mock *mock.Mock
}

func (_m *Servicecodesender) EXPECT() *Servicecodesender_Expecter {
	return &Servicecodesender_Expecter{mock: &_m.Mock}
}

// CreateCode provides a mock function with given fields: _a0
func (_m *Servicecodesender) CreateCode(_a0 user.User) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.User) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Servicecodesender_CreateCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCode'
type Servicecodesender_CreateCode_Call struct {
	*mock.Call
}

// CreateCode is a helper method to define mock.On call
//   - _a0 user.User
func (_e *Servicecodesender_Expecter) CreateCode(_a0 interface{}) *Servicecodesender_CreateCode_Call {
	return &Servicecodesender_CreateCode_Call{Call: _e.mock.On("CreateCode", _a0)}
}

func (_c *Servicecodesender_CreateCode_Call) Run(run func(_a0 user.User)) *Servicecodesender_CreateCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.User))
	})
	return _c
}

func (_c *Servicecodesender_CreateCode_Call) Return(_a0 string, _a1 error) *Servicecodesender_CreateCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Servicecodesender_CreateCode_Call) RunAndReturn(run func(user.User) (string, error)) *Servicecodesender_CreateCode_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyCode provides a mock function with given fields: userEmail, code
func (_m *Servicecodesender) VerifyCode(userEmail string, code string) error {
	ret := _m.Called(userEmail, code)

	if len(ret) == 0 {
		panic("no return value specified for VerifyCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userEmail, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Servicecodesender_VerifyCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyCode'
type Servicecodesender_VerifyCode_Call struct {
	*mock.Call
}

// VerifyCode is a helper method to define mock.On call
//   - userEmail string
//   - code string
func (_e *Servicecodesender_Expecter) VerifyCode(userEmail interface{}, code interface{}) *Servicecodesender_VerifyCode_Call {
	return &Servicecodesender_VerifyCode_Call{Call: _e.mock.On("VerifyCode", userEmail, code)}
}

func (_c *Servicecodesender_VerifyCode_Call) Run(run func(userEmail string, code string)) *Servicecodesender_VerifyCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Servicecodesender_VerifyCode_Call) Return(_a0 error) *Servicecodesender_VerifyCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Servicecodesender_VerifyCode_Call) RunAndReturn(run func(string, string) error) *Servicecodesender_VerifyCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewServicecodesender creates a new instance of Servicecodesender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServicecodesender(t interface {
	mock.TestingT
	Cleanup(func())
}) *Servicecodesender {
	mock := &Servicecodesender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
