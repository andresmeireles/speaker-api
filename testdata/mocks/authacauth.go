// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	auth "github.com/andresmeireles/speaker/internal/auth"
	mock "github.com/stretchr/testify/mock"

	user "github.com/andresmeireles/speaker/internal/user"
)

// acauth is an autogenerated mock type for the ac type
type acauth struct {
	mock.Mock
}

type acauth_Expecter struct {
	mock *mock.Mock
}

func (_m *acauth) EXPECT() *acauth_Expecter {
	return &acauth_Expecter{mock: &_m.Mock}
}

// CreateJWT provides a mock function with given fields: _a0, remember
func (_m *acauth) CreateJWT(_a0 user.User, remember bool) (auth.Auth, error) {
	ret := _m.Called(_a0, remember)

	if len(ret) == 0 {
		panic("no return value specified for CreateJWT")
	}

	var r0 auth.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User, bool) (auth.Auth, error)); ok {
		return rf(_a0, remember)
	}
	if rf, ok := ret.Get(0).(func(user.User, bool) auth.Auth); ok {
		r0 = rf(_a0, remember)
	} else {
		r0 = ret.Get(0).(auth.Auth)
	}

	if rf, ok := ret.Get(1).(func(user.User, bool) error); ok {
		r1 = rf(_a0, remember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// acauth_CreateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJWT'
type acauth_CreateJWT_Call struct {
	*mock.Call
}

// CreateJWT is a helper method to define mock.On call
//   - _a0 user.User
//   - remember bool
func (_e *acauth_Expecter) CreateJWT(_a0 interface{}, remember interface{}) *acauth_CreateJWT_Call {
	return &acauth_CreateJWT_Call{Call: _e.mock.On("CreateJWT", _a0, remember)}
}

func (_c *acauth_CreateJWT_Call) Run(run func(_a0 user.User, remember bool)) *acauth_CreateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.User), args[1].(bool))
	})
	return _c
}

func (_c *acauth_CreateJWT_Call) Return(_a0 auth.Auth, _a1 error) *acauth_CreateJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *acauth_CreateJWT_Call) RunAndReturn(run func(user.User, bool) (auth.Auth, error)) *acauth_CreateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: userId
func (_m *acauth) Logout(userId int) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// acauth_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type acauth_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - userId int
func (_e *acauth_Expecter) Logout(userId interface{}) *acauth_Logout_Call {
	return &acauth_Logout_Call{Call: _e.mock.On("Logout", userId)}
}

func (_c *acauth_Logout_Call) Run(run func(userId int)) *acauth_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *acauth_Logout_Call) Return(_a0 error) *acauth_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *acauth_Logout_Call) RunAndReturn(run func(int) error) *acauth_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// SendCode provides a mock function with given fields: email
func (_m *acauth) SendCode(email string) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for SendCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// acauth_SendCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCode'
type acauth_SendCode_Call struct {
	*mock.Call
}

// SendCode is a helper method to define mock.On call
//   - email string
func (_e *acauth_Expecter) SendCode(email interface{}) *acauth_SendCode_Call {
	return &acauth_SendCode_Call{Call: _e.mock.On("SendCode", email)}
}

func (_c *acauth_SendCode_Call) Run(run func(email string)) *acauth_SendCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *acauth_SendCode_Call) Return(_a0 error) *acauth_SendCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *acauth_SendCode_Call) RunAndReturn(run func(string) error) *acauth_SendCode_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateJwt provides a mock function with given fields: token
func (_m *acauth) ValidateJwt(token string) bool {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateJwt")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// acauth_ValidateJwt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateJwt'
type acauth_ValidateJwt_Call struct {
	*mock.Call
}

// ValidateJwt is a helper method to define mock.On call
//   - token string
func (_e *acauth_Expecter) ValidateJwt(token interface{}) *acauth_ValidateJwt_Call {
	return &acauth_ValidateJwt_Call{Call: _e.mock.On("ValidateJwt", token)}
}

func (_c *acauth_ValidateJwt_Call) Run(run func(token string)) *acauth_ValidateJwt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *acauth_ValidateJwt_Call) Return(_a0 bool) *acauth_ValidateJwt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *acauth_ValidateJwt_Call) RunAndReturn(run func(string) bool) *acauth_ValidateJwt_Call {
	_c.Call.Return(run)
	return _c
}

// newAcauth creates a new instance of acauth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newAcauth(t interface {
	mock.TestingT
	Cleanup(func())
}) *acauth {
	mock := &acauth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
