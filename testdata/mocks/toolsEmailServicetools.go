// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EmailServicetools is an autogenerated mock type for the EmailService type
type EmailServicetools struct {
	mock.Mock
}

type EmailServicetools_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailServicetools) EXPECT() *EmailServicetools_Expecter {
	return &EmailServicetools_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: message, to
func (_m *EmailServicetools) Send(message string, to string) error {
	ret := _m.Called(message, to)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(message, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailServicetools_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type EmailServicetools_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - message string
//   - to string
func (_e *EmailServicetools_Expecter) Send(message interface{}, to interface{}) *EmailServicetools_Send_Call {
	return &EmailServicetools_Send_Call{Call: _e.mock.On("Send", message, to)}
}

func (_c *EmailServicetools_Send_Call) Run(run func(message string, to string)) *EmailServicetools_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *EmailServicetools_Send_Call) Return(_a0 error) *EmailServicetools_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailServicetools_Send_Call) RunAndReturn(run func(string, string) error) *EmailServicetools_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetFrom provides a mock function with given fields: from
func (_m *EmailServicetools) SetFrom(from string) error {
	ret := _m.Called(from)

	if len(ret) == 0 {
		panic("no return value specified for SetFrom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(from)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailServicetools_SetFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFrom'
type EmailServicetools_SetFrom_Call struct {
	*mock.Call
}

// SetFrom is a helper method to define mock.On call
//   - from string
func (_e *EmailServicetools_Expecter) SetFrom(from interface{}) *EmailServicetools_SetFrom_Call {
	return &EmailServicetools_SetFrom_Call{Call: _e.mock.On("SetFrom", from)}
}

func (_c *EmailServicetools_SetFrom_Call) Run(run func(from string)) *EmailServicetools_SetFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EmailServicetools_SetFrom_Call) Return(_a0 error) *EmailServicetools_SetFrom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailServicetools_SetFrom_Call) RunAndReturn(run func(string) error) *EmailServicetools_SetFrom_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailServicetools creates a new instance of EmailServicetools. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailServicetools(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailServicetools {
	mock := &EmailServicetools{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
