// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Migrationauxcmd is an autogenerated mock type for the Migration type
type Migrationauxcmd struct {
	mock.Mock
}

type Migrationauxcmd_Expecter struct {
	mock *mock.Mock
}

func (_m *Migrationauxcmd) EXPECT() *Migrationauxcmd_Expecter {
	return &Migrationauxcmd_Expecter{mock: &_m.Mock}
}

// Down provides a mock function with given fields:
func (_m *Migrationauxcmd) Down() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Down")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrationauxcmd_Down_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Down'
type Migrationauxcmd_Down_Call struct {
	*mock.Call
}

// Down is a helper method to define mock.On call
func (_e *Migrationauxcmd_Expecter) Down() *Migrationauxcmd_Down_Call {
	return &Migrationauxcmd_Down_Call{Call: _e.mock.On("Down")}
}

func (_c *Migrationauxcmd_Down_Call) Run(run func()) *Migrationauxcmd_Down_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Migrationauxcmd_Down_Call) Return(_a0 error) *Migrationauxcmd_Down_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Migrationauxcmd_Down_Call) RunAndReturn(run func() error) *Migrationauxcmd_Down_Call {
	_c.Call.Return(run)
	return _c
}

// Up provides a mock function with given fields:
func (_m *Migrationauxcmd) Up() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Up")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrationauxcmd_Up_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Up'
type Migrationauxcmd_Up_Call struct {
	*mock.Call
}

// Up is a helper method to define mock.On call
func (_e *Migrationauxcmd_Expecter) Up() *Migrationauxcmd_Up_Call {
	return &Migrationauxcmd_Up_Call{Call: _e.mock.On("Up")}
}

func (_c *Migrationauxcmd_Up_Call) Run(run func()) *Migrationauxcmd_Up_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Migrationauxcmd_Up_Call) Return(_a0 error) *Migrationauxcmd_Up_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Migrationauxcmd_Up_Call) RunAndReturn(run func() error) *Migrationauxcmd_Up_Call {
	_c.Call.Return(run)
	return _c
}

// NewMigrationauxcmd creates a new instance of Migrationauxcmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMigrationauxcmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *Migrationauxcmd {
	mock := &Migrationauxcmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
