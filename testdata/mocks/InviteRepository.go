// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	invite "github.com/andresmeireles/speaker/internal/invite"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// InviteRepository is an autogenerated mock type for the InviteRepository type
type InviteRepository struct {
	mock.Mock
}

type InviteRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *InviteRepository) EXPECT() *InviteRepository_Expecter {
	return &InviteRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0
func (_m *InviteRepository) Add(_a0 invite.Invite) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(invite.Invite) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type InviteRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 invite.Invite
func (_e *InviteRepository_Expecter) Add(_a0 interface{}) *InviteRepository_Add_Call {
	return &InviteRepository_Add_Call{Call: _e.mock.On("Add", _a0)}
}

func (_c *InviteRepository_Add_Call) Run(run func(_a0 invite.Invite)) *InviteRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(invite.Invite))
	})
	return _c
}

func (_c *InviteRepository_Add_Call) Return(_a0 error) *InviteRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteRepository_Add_Call) RunAndReturn(run func(invite.Invite) error) *InviteRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0
func (_m *InviteRepository) Delete(_a0 invite.Invite) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(invite.Invite) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type InviteRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 invite.Invite
func (_e *InviteRepository_Expecter) Delete(_a0 interface{}) *InviteRepository_Delete_Call {
	return &InviteRepository_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *InviteRepository_Delete_Call) Run(run func(_a0 invite.Invite)) *InviteRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(invite.Invite))
	})
	return _c
}

func (_c *InviteRepository_Delete_Call) Return(_a0 error) *InviteRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteRepository_Delete_Call) RunAndReturn(run func(invite.Invite) error) *InviteRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOrdered provides a mock function with given fields: field, asc
func (_m *InviteRepository) GetAllOrdered(field string, asc bool) ([]invite.Invite, error) {
	ret := _m.Called(field, asc)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrdered")
	}

	var r0 []invite.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) ([]invite.Invite, error)); ok {
		return rf(field, asc)
	}
	if rf, ok := ret.Get(0).(func(string, bool) []invite.Invite); ok {
		r0 = rf(field, asc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invite.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(field, asc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteRepository_GetAllOrdered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOrdered'
type InviteRepository_GetAllOrdered_Call struct {
	*mock.Call
}

// GetAllOrdered is a helper method to define mock.On call
//   - field string
//   - asc bool
func (_e *InviteRepository_Expecter) GetAllOrdered(field interface{}, asc interface{}) *InviteRepository_GetAllOrdered_Call {
	return &InviteRepository_GetAllOrdered_Call{Call: _e.mock.On("GetAllOrdered", field, asc)}
}

func (_c *InviteRepository_GetAllOrdered_Call) Run(run func(field string, asc bool)) *InviteRepository_GetAllOrdered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *InviteRepository_GetAllOrdered_Call) Return(_a0 []invite.Invite, _a1 error) *InviteRepository_GetAllOrdered_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InviteRepository_GetAllOrdered_Call) RunAndReturn(run func(string, bool) ([]invite.Invite, error)) *InviteRepository_GetAllOrdered_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *InviteRepository) GetById(id int) (*invite.Invite, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *invite.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*invite.Invite, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *invite.Invite); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invite.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type InviteRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id int
func (_e *InviteRepository_Expecter) GetById(id interface{}) *InviteRepository_GetById_Call {
	return &InviteRepository_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *InviteRepository_GetById_Call) Run(run func(id int)) *InviteRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InviteRepository_GetById_Call) Return(_a0 *invite.Invite, _a1 error) *InviteRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InviteRepository_GetById_Call) RunAndReturn(run func(int) (*invite.Invite, error)) *InviteRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPersonId provides a mock function with given fields: id
func (_m *InviteRepository) GetByPersonId(id int) ([]invite.Invite, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByPersonId")
	}

	var r0 []invite.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]invite.Invite, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []invite.Invite); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invite.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteRepository_GetByPersonId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPersonId'
type InviteRepository_GetByPersonId_Call struct {
	*mock.Call
}

// GetByPersonId is a helper method to define mock.On call
//   - id int
func (_e *InviteRepository_Expecter) GetByPersonId(id interface{}) *InviteRepository_GetByPersonId_Call {
	return &InviteRepository_GetByPersonId_Call{Call: _e.mock.On("GetByPersonId", id)}
}

func (_c *InviteRepository_GetByPersonId_Call) Run(run func(id int)) *InviteRepository_GetByPersonId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InviteRepository_GetByPersonId_Call) Return(_a0 []invite.Invite, _a1 error) *InviteRepository_GetByPersonId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InviteRepository_GetByPersonId_Call) RunAndReturn(run func(int) ([]invite.Invite, error)) *InviteRepository_GetByPersonId_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: query, values
func (_m *InviteRepository) Query(query string, values ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(query, values...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(query, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteRepository_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type InviteRepository_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - query string
//   - values ...interface{}
func (_e *InviteRepository_Expecter) Query(query interface{}, values ...interface{}) *InviteRepository_Query_Call {
	return &InviteRepository_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{query}, values...)...)}
}

func (_c *InviteRepository_Query_Call) Run(run func(query string, values ...interface{})) *InviteRepository_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *InviteRepository_Query_Call) Return(_a0 *sql.Rows, _a1 error) *InviteRepository_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InviteRepository_Query_Call) RunAndReturn(run func(string, ...interface{}) (*sql.Rows, error)) *InviteRepository_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *InviteRepository) Update(_a0 invite.Invite) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(invite.Invite) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type InviteRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 invite.Invite
func (_e *InviteRepository_Expecter) Update(_a0 interface{}) *InviteRepository_Update_Call {
	return &InviteRepository_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *InviteRepository_Update_Call) Run(run func(_a0 invite.Invite)) *InviteRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(invite.Invite))
	})
	return _c
}

func (_c *InviteRepository_Update_Call) Return(_a0 error) *InviteRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteRepository_Update_Call) RunAndReturn(run func(invite.Invite) error) *InviteRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: _a0, status
func (_m *InviteRepository) UpdateStatus(_a0 invite.Invite, status int) error {
	ret := _m.Called(_a0, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(invite.Invite, int) error); ok {
		r0 = rf(_a0, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type InviteRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - _a0 invite.Invite
//   - status int
func (_e *InviteRepository_Expecter) UpdateStatus(_a0 interface{}, status interface{}) *InviteRepository_UpdateStatus_Call {
	return &InviteRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", _a0, status)}
}

func (_c *InviteRepository_UpdateStatus_Call) Run(run func(_a0 invite.Invite, status int)) *InviteRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(invite.Invite), args[1].(int))
	})
	return _c
}

func (_c *InviteRepository_UpdateStatus_Call) Return(_a0 error) *InviteRepository_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteRepository_UpdateStatus_Call) RunAndReturn(run func(invite.Invite, int) error) *InviteRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewInviteRepository creates a new instance of InviteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInviteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InviteRepository {
	mock := &InviteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
