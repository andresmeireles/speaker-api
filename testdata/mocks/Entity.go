// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Entity is an autogenerated mock type for the Entity type
type Entity struct {
	mock.Mock
}

type Entity_Expecter struct {
	mock *mock.Mock
}

func (_m *Entity) EXPECT() *Entity_Expecter {
	return &Entity_Expecter{mock: &_m.Mock}
}

// GetId provides a mock function with given fields:
func (_m *Entity) GetId() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Entity_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type Entity_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *Entity_Expecter) GetId() *Entity_GetId_Call {
	return &Entity_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *Entity_GetId_Call) Run(run func()) *Entity_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entity_GetId_Call) Return(_a0 int) *Entity_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entity_GetId_Call) RunAndReturn(run func() int) *Entity_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// Table provides a mock function with given fields:
func (_m *Entity) Table() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Table")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Entity_Table_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Table'
type Entity_Table_Call struct {
	*mock.Call
}

// Table is a helper method to define mock.On call
func (_e *Entity_Expecter) Table() *Entity_Table_Call {
	return &Entity_Table_Call{Call: _e.mock.On("Table")}
}

func (_c *Entity_Table_Call) Run(run func()) *Entity_Table_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entity_Table_Call) Return(_a0 string) *Entity_Table_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entity_Table_Call) RunAndReturn(run func() string) *Entity_Table_Call {
	_c.Call.Return(run)
	return _c
}

// ToJson provides a mock function with given fields:
func (_m *Entity) ToJson() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToJson")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Entity_ToJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToJson'
type Entity_ToJson_Call struct {
	*mock.Call
}

// ToJson is a helper method to define mock.On call
func (_e *Entity_Expecter) ToJson() *Entity_ToJson_Call {
	return &Entity_ToJson_Call{Call: _e.mock.On("ToJson")}
}

func (_c *Entity_ToJson_Call) Run(run func()) *Entity_ToJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Entity_ToJson_Call) Return(_a0 map[string]interface{}) *Entity_ToJson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Entity_ToJson_Call) RunAndReturn(run func() map[string]interface{}) *Entity_ToJson_Call {
	_c.Call.Return(run)
	return _c
}

// NewEntity creates a new instance of Entity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *Entity {
	mock := &Entity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
