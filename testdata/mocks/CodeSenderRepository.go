// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	codesender "github.com/andresmeireles/speaker/internal/codesender"
	mock "github.com/stretchr/testify/mock"
)

// CodeSenderRepository is an autogenerated mock type for the CodeSenderRepository type
type CodeSenderRepository struct {
	mock.Mock
}

type CodeSenderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CodeSenderRepository) EXPECT() *CodeSenderRepository_Expecter {
	return &CodeSenderRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: authCode
func (_m *CodeSenderRepository) Add(authCode codesender.AuthCode) error {
	ret := _m.Called(authCode)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(codesender.AuthCode) error); ok {
		r0 = rf(authCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CodeSenderRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type CodeSenderRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - authCode codesender.AuthCode
func (_e *CodeSenderRepository_Expecter) Add(authCode interface{}) *CodeSenderRepository_Add_Call {
	return &CodeSenderRepository_Add_Call{Call: _e.mock.On("Add", authCode)}
}

func (_c *CodeSenderRepository_Add_Call) Run(run func(authCode codesender.AuthCode)) *CodeSenderRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(codesender.AuthCode))
	})
	return _c
}

func (_c *CodeSenderRepository_Add_Call) Return(_a0 error) *CodeSenderRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CodeSenderRepository_Add_Call) RunAndReturn(run func(codesender.AuthCode) error) *CodeSenderRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *CodeSenderRepository) GetAll() ([]codesender.AuthCode, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []codesender.AuthCode
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]codesender.AuthCode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []codesender.AuthCode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]codesender.AuthCode)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CodeSenderRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type CodeSenderRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *CodeSenderRepository_Expecter) GetAll() *CodeSenderRepository_GetAll_Call {
	return &CodeSenderRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *CodeSenderRepository_GetAll_Call) Run(run func()) *CodeSenderRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CodeSenderRepository_GetAll_Call) Return(_a0 []codesender.AuthCode, _a1 error) *CodeSenderRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CodeSenderRepository_GetAll_Call) RunAndReturn(run func() ([]codesender.AuthCode, error)) *CodeSenderRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCode provides a mock function with given fields: code
func (_m *CodeSenderRepository) GetByCode(code string) (codesender.AuthCode, error) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for GetByCode")
	}

	var r0 codesender.AuthCode
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (codesender.AuthCode, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) codesender.AuthCode); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(codesender.AuthCode)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CodeSenderRepository_GetByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCode'
type CodeSenderRepository_GetByCode_Call struct {
	*mock.Call
}

// GetByCode is a helper method to define mock.On call
//   - code string
func (_e *CodeSenderRepository_Expecter) GetByCode(code interface{}) *CodeSenderRepository_GetByCode_Call {
	return &CodeSenderRepository_GetByCode_Call{Call: _e.mock.On("GetByCode", code)}
}

func (_c *CodeSenderRepository_GetByCode_Call) Run(run func(code string)) *CodeSenderRepository_GetByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CodeSenderRepository_GetByCode_Call) Return(_a0 codesender.AuthCode, _a1 error) *CodeSenderRepository_GetByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CodeSenderRepository_GetByCode_Call) RunAndReturn(run func(string) (codesender.AuthCode, error)) *CodeSenderRepository_GetByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: authCodeId
func (_m *CodeSenderRepository) GetById(authCodeId int) (codesender.AuthCode, error) {
	ret := _m.Called(authCodeId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 codesender.AuthCode
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (codesender.AuthCode, error)); ok {
		return rf(authCodeId)
	}
	if rf, ok := ret.Get(0).(func(int) codesender.AuthCode); ok {
		r0 = rf(authCodeId)
	} else {
		r0 = ret.Get(0).(codesender.AuthCode)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(authCodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CodeSenderRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type CodeSenderRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - authCodeId int
func (_e *CodeSenderRepository_Expecter) GetById(authCodeId interface{}) *CodeSenderRepository_GetById_Call {
	return &CodeSenderRepository_GetById_Call{Call: _e.mock.On("GetById", authCodeId)}
}

func (_c *CodeSenderRepository_GetById_Call) Run(run func(authCodeId int)) *CodeSenderRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CodeSenderRepository_GetById_Call) Return(_a0 codesender.AuthCode, _a1 error) *CodeSenderRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CodeSenderRepository_GetById_Call) RunAndReturn(run func(int) (codesender.AuthCode, error)) *CodeSenderRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: authCode
func (_m *CodeSenderRepository) Update(authCode codesender.AuthCode) error {
	ret := _m.Called(authCode)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(codesender.AuthCode) error); ok {
		r0 = rf(authCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CodeSenderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CodeSenderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - authCode codesender.AuthCode
func (_e *CodeSenderRepository_Expecter) Update(authCode interface{}) *CodeSenderRepository_Update_Call {
	return &CodeSenderRepository_Update_Call{Call: _e.mock.On("Update", authCode)}
}

func (_c *CodeSenderRepository_Update_Call) Run(run func(authCode codesender.AuthCode)) *CodeSenderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(codesender.AuthCode))
	})
	return _c
}

func (_c *CodeSenderRepository_Update_Call) Return(_a0 error) *CodeSenderRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CodeSenderRepository_Update_Call) RunAndReturn(run func(codesender.AuthCode) error) *CodeSenderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCodeSenderRepository creates a new instance of CodeSenderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCodeSenderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CodeSenderRepository {
	mock := &CodeSenderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
