// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	invite "github.com/andresmeireles/speaker/internal/invite"
	mock "github.com/stretchr/testify/mock"
)

// InviteService is an autogenerated mock type for the InviteService type
type InviteService struct {
	mock.Mock
}

type InviteService_Expecter struct {
	mock *mock.Mock
}

func (_m *InviteService) EXPECT() *InviteService_Expecter {
	return &InviteService_Expecter{mock: &_m.Mock}
}

// AcceptInvite provides a mock function with given fields: inviteId
func (_m *InviteService) AcceptInvite(inviteId int) error {
	ret := _m.Called(inviteId)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(inviteId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteService_AcceptInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptInvite'
type InviteService_AcceptInvite_Call struct {
	*mock.Call
}

// AcceptInvite is a helper method to define mock.On call
//   - inviteId int
func (_e *InviteService_Expecter) AcceptInvite(inviteId interface{}) *InviteService_AcceptInvite_Call {
	return &InviteService_AcceptInvite_Call{Call: _e.mock.On("AcceptInvite", inviteId)}
}

func (_c *InviteService_AcceptInvite_Call) Run(run func(inviteId int)) *InviteService_AcceptInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InviteService_AcceptInvite_Call) Return(_a0 error) *InviteService_AcceptInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteService_AcceptInvite_Call) RunAndReturn(run func(int) error) *InviteService_AcceptInvite_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInvite provides a mock function with given fields: inviteData
func (_m *InviteService) CreateInvite(inviteData invite.InvitePost) (invite.Invite, error) {
	ret := _m.Called(inviteData)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvite")
	}

	var r0 invite.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(invite.InvitePost) (invite.Invite, error)); ok {
		return rf(inviteData)
	}
	if rf, ok := ret.Get(0).(func(invite.InvitePost) invite.Invite); ok {
		r0 = rf(inviteData)
	} else {
		r0 = ret.Get(0).(invite.Invite)
	}

	if rf, ok := ret.Get(1).(func(invite.InvitePost) error); ok {
		r1 = rf(inviteData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteService_CreateInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvite'
type InviteService_CreateInvite_Call struct {
	*mock.Call
}

// CreateInvite is a helper method to define mock.On call
//   - inviteData invite.InvitePost
func (_e *InviteService_Expecter) CreateInvite(inviteData interface{}) *InviteService_CreateInvite_Call {
	return &InviteService_CreateInvite_Call{Call: _e.mock.On("CreateInvite", inviteData)}
}

func (_c *InviteService_CreateInvite_Call) Run(run func(inviteData invite.InvitePost)) *InviteService_CreateInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(invite.InvitePost))
	})
	return _c
}

func (_c *InviteService_CreateInvite_Call) Return(_a0 invite.Invite, _a1 error) *InviteService_CreateInvite_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InviteService_CreateInvite_Call) RunAndReturn(run func(invite.InvitePost) (invite.Invite, error)) *InviteService_CreateInvite_Call {
	_c.Call.Return(run)
	return _c
}

// ParseInviteWithTemplate provides a mock function with given fields: inviteId
func (_m *InviteService) ParseInviteWithTemplate(inviteId int) (string, error) {
	ret := _m.Called(inviteId)

	if len(ret) == 0 {
		panic("no return value specified for ParseInviteWithTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(inviteId)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(inviteId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(inviteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteService_ParseInviteWithTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseInviteWithTemplate'
type InviteService_ParseInviteWithTemplate_Call struct {
	*mock.Call
}

// ParseInviteWithTemplate is a helper method to define mock.On call
//   - inviteId int
func (_e *InviteService_Expecter) ParseInviteWithTemplate(inviteId interface{}) *InviteService_ParseInviteWithTemplate_Call {
	return &InviteService_ParseInviteWithTemplate_Call{Call: _e.mock.On("ParseInviteWithTemplate", inviteId)}
}

func (_c *InviteService_ParseInviteWithTemplate_Call) Run(run func(inviteId int)) *InviteService_ParseInviteWithTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InviteService_ParseInviteWithTemplate_Call) Return(_a0 string, _a1 error) *InviteService_ParseInviteWithTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InviteService_ParseInviteWithTemplate_Call) RunAndReturn(run func(int) (string, error)) *InviteService_ParseInviteWithTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ParseRememberMessage provides a mock function with given fields: inviteId
func (_m *InviteService) ParseRememberMessage(inviteId int) (string, error) {
	ret := _m.Called(inviteId)

	if len(ret) == 0 {
		panic("no return value specified for ParseRememberMessage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(inviteId)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(inviteId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(inviteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteService_ParseRememberMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseRememberMessage'
type InviteService_ParseRememberMessage_Call struct {
	*mock.Call
}

// ParseRememberMessage is a helper method to define mock.On call
//   - inviteId int
func (_e *InviteService_Expecter) ParseRememberMessage(inviteId interface{}) *InviteService_ParseRememberMessage_Call {
	return &InviteService_ParseRememberMessage_Call{Call: _e.mock.On("ParseRememberMessage", inviteId)}
}

func (_c *InviteService_ParseRememberMessage_Call) Run(run func(inviteId int)) *InviteService_ParseRememberMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InviteService_ParseRememberMessage_Call) Return(_a0 string, _a1 error) *InviteService_ParseRememberMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InviteService_ParseRememberMessage_Call) RunAndReturn(run func(int) (string, error)) *InviteService_ParseRememberMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Reject provides a mock function with given fields: inviteId
func (_m *InviteService) Reject(inviteId int) error {
	ret := _m.Called(inviteId)

	if len(ret) == 0 {
		panic("no return value specified for Reject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(inviteId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteService_Reject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reject'
type InviteService_Reject_Call struct {
	*mock.Call
}

// Reject is a helper method to define mock.On call
//   - inviteId int
func (_e *InviteService_Expecter) Reject(inviteId interface{}) *InviteService_Reject_Call {
	return &InviteService_Reject_Call{Call: _e.mock.On("Reject", inviteId)}
}

func (_c *InviteService_Reject_Call) Run(run func(inviteId int)) *InviteService_Reject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InviteService_Reject_Call) Return(_a0 error) *InviteService_Reject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteService_Reject_Call) RunAndReturn(run func(int) error) *InviteService_Reject_Call {
	_c.Call.Return(run)
	return _c
}

// RememberInvite provides a mock function with given fields: inviteId
func (_m *InviteService) RememberInvite(inviteId int) error {
	ret := _m.Called(inviteId)

	if len(ret) == 0 {
		panic("no return value specified for RememberInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(inviteId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteService_RememberInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RememberInvite'
type InviteService_RememberInvite_Call struct {
	*mock.Call
}

// RememberInvite is a helper method to define mock.On call
//   - inviteId int
func (_e *InviteService_Expecter) RememberInvite(inviteId interface{}) *InviteService_RememberInvite_Call {
	return &InviteService_RememberInvite_Call{Call: _e.mock.On("RememberInvite", inviteId)}
}

func (_c *InviteService_RememberInvite_Call) Run(run func(inviteId int)) *InviteService_RememberInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InviteService_RememberInvite_Call) Return(_a0 error) *InviteService_RememberInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteService_RememberInvite_Call) RunAndReturn(run func(int) error) *InviteService_RememberInvite_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveInvite provides a mock function with given fields: id
func (_m *InviteService) RemoveInvite(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteService_RemoveInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveInvite'
type InviteService_RemoveInvite_Call struct {
	*mock.Call
}

// RemoveInvite is a helper method to define mock.On call
//   - id int
func (_e *InviteService_Expecter) RemoveInvite(id interface{}) *InviteService_RemoveInvite_Call {
	return &InviteService_RemoveInvite_Call{Call: _e.mock.On("RemoveInvite", id)}
}

func (_c *InviteService_RemoveInvite_Call) Run(run func(id int)) *InviteService_RemoveInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InviteService_RemoveInvite_Call) Return(_a0 error) *InviteService_RemoveInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteService_RemoveInvite_Call) RunAndReturn(run func(int) error) *InviteService_RemoveInvite_Call {
	_c.Call.Return(run)
	return _c
}

// SetDoneStatus provides a mock function with given fields: inviteId, done
func (_m *InviteService) SetDoneStatus(inviteId int, done bool) error {
	ret := _m.Called(inviteId, done)

	if len(ret) == 0 {
		panic("no return value specified for SetDoneStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, bool) error); ok {
		r0 = rf(inviteId, done)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteService_SetDoneStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDoneStatus'
type InviteService_SetDoneStatus_Call struct {
	*mock.Call
}

// SetDoneStatus is a helper method to define mock.On call
//   - inviteId int
//   - done bool
func (_e *InviteService_Expecter) SetDoneStatus(inviteId interface{}, done interface{}) *InviteService_SetDoneStatus_Call {
	return &InviteService_SetDoneStatus_Call{Call: _e.mock.On("SetDoneStatus", inviteId, done)}
}

func (_c *InviteService_SetDoneStatus_Call) Run(run func(inviteId int, done bool)) *InviteService_SetDoneStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(bool))
	})
	return _c
}

func (_c *InviteService_SetDoneStatus_Call) Return(_a0 error) *InviteService_SetDoneStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteService_SetDoneStatus_Call) RunAndReturn(run func(int, bool) error) *InviteService_SetDoneStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInvite provides a mock function with given fields: updateInviteData, inviteId
func (_m *InviteService) UpdateInvite(updateInviteData invite.UpdateInviteData, inviteId int) error {
	ret := _m.Called(updateInviteData, inviteId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(invite.UpdateInviteData, int) error); ok {
		r0 = rf(updateInviteData, inviteId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteService_UpdateInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInvite'
type InviteService_UpdateInvite_Call struct {
	*mock.Call
}

// UpdateInvite is a helper method to define mock.On call
//   - updateInviteData invite.UpdateInviteData
//   - inviteId int
func (_e *InviteService_Expecter) UpdateInvite(updateInviteData interface{}, inviteId interface{}) *InviteService_UpdateInvite_Call {
	return &InviteService_UpdateInvite_Call{Call: _e.mock.On("UpdateInvite", updateInviteData, inviteId)}
}

func (_c *InviteService_UpdateInvite_Call) Run(run func(updateInviteData invite.UpdateInviteData, inviteId int)) *InviteService_UpdateInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(invite.UpdateInviteData), args[1].(int))
	})
	return _c
}

func (_c *InviteService_UpdateInvite_Call) Return(_a0 error) *InviteService_UpdateInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InviteService_UpdateInvite_Call) RunAndReturn(run func(invite.UpdateInviteData, int) error) *InviteService_UpdateInvite_Call {
	_c.Call.Return(run)
	return _c
}

// NewInviteService creates a new instance of InviteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInviteService(t interface {
	mock.TestingT
	Cleanup(func())
}) *InviteService {
	mock := &InviteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
