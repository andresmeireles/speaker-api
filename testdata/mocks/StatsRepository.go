// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	stats "github.com/andresmeireles/speaker/internal/stats"
	mock "github.com/stretchr/testify/mock"
)

// StatsRepository is an autogenerated mock type for the StatsRepository type
type StatsRepository struct {
	mock.Mock
}

type StatsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StatsRepository) EXPECT() *StatsRepository_Expecter {
	return &StatsRepository_Expecter{mock: &_m.Mock}
}

// GetNumberOfSpeakersForPersons provides a mock function with given fields:
func (_m *StatsRepository) GetNumberOfSpeakersForPersons() ([]stats.SpeakerReport, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNumberOfSpeakersForPersons")
	}

	var r0 []stats.SpeakerReport
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]stats.SpeakerReport, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []stats.SpeakerReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]stats.SpeakerReport)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsRepository_GetNumberOfSpeakersForPersons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNumberOfSpeakersForPersons'
type StatsRepository_GetNumberOfSpeakersForPersons_Call struct {
	*mock.Call
}

// GetNumberOfSpeakersForPersons is a helper method to define mock.On call
func (_e *StatsRepository_Expecter) GetNumberOfSpeakersForPersons() *StatsRepository_GetNumberOfSpeakersForPersons_Call {
	return &StatsRepository_GetNumberOfSpeakersForPersons_Call{Call: _e.mock.On("GetNumberOfSpeakersForPersons")}
}

func (_c *StatsRepository_GetNumberOfSpeakersForPersons_Call) Run(run func()) *StatsRepository_GetNumberOfSpeakersForPersons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StatsRepository_GetNumberOfSpeakersForPersons_Call) Return(_a0 []stats.SpeakerReport, _a1 error) *StatsRepository_GetNumberOfSpeakersForPersons_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatsRepository_GetNumberOfSpeakersForPersons_Call) RunAndReturn(run func() ([]stats.SpeakerReport, error)) *StatsRepository_GetNumberOfSpeakersForPersons_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatsRepository creates a new instance of StatsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatsRepository {
	mock := &StatsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
