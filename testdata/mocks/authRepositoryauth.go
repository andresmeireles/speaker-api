// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	auth "github.com/andresmeireles/speaker/internal/auth"
	codesender "github.com/andresmeireles/speaker/internal/codesender"

	mock "github.com/stretchr/testify/mock"
)

// Repositoryauth is an autogenerated mock type for the Repository type
type Repositoryauth struct {
	mock.Mock
}

type Repositoryauth_Expecter struct {
	mock *mock.Mock
}

func (_m *Repositoryauth) EXPECT() *Repositoryauth_Expecter {
	return &Repositoryauth_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0
func (_m *Repositoryauth) Add(_a0 auth.Auth) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.Auth) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositoryauth_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Repositoryauth_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 auth.Auth
func (_e *Repositoryauth_Expecter) Add(_a0 interface{}) *Repositoryauth_Add_Call {
	return &Repositoryauth_Add_Call{Call: _e.mock.On("Add", _a0)}
}

func (_c *Repositoryauth_Add_Call) Run(run func(_a0 auth.Auth)) *Repositoryauth_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(auth.Auth))
	})
	return _c
}

func (_c *Repositoryauth_Add_Call) Return(_a0 error) *Repositoryauth_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositoryauth_Add_Call) RunAndReturn(run func(auth.Auth) error) *Repositoryauth_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AuthCodeByUser provides a mock function with given fields: authCode, userId
func (_m *Repositoryauth) AuthCodeByUser(authCode string, userId int) (*codesender.AuthCode, error) {
	ret := _m.Called(authCode, userId)

	if len(ret) == 0 {
		panic("no return value specified for AuthCodeByUser")
	}

	var r0 *codesender.AuthCode
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (*codesender.AuthCode, error)); ok {
		return rf(authCode, userId)
	}
	if rf, ok := ret.Get(0).(func(string, int) *codesender.AuthCode); ok {
		r0 = rf(authCode, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codesender.AuthCode)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(authCode, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositoryauth_AuthCodeByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthCodeByUser'
type Repositoryauth_AuthCodeByUser_Call struct {
	*mock.Call
}

// AuthCodeByUser is a helper method to define mock.On call
//   - authCode string
//   - userId int
func (_e *Repositoryauth_Expecter) AuthCodeByUser(authCode interface{}, userId interface{}) *Repositoryauth_AuthCodeByUser_Call {
	return &Repositoryauth_AuthCodeByUser_Call{Call: _e.mock.On("AuthCodeByUser", authCode, userId)}
}

func (_c *Repositoryauth_AuthCodeByUser_Call) Run(run func(authCode string, userId int)) *Repositoryauth_AuthCodeByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *Repositoryauth_AuthCodeByUser_Call) Return(_a0 *codesender.AuthCode, _a1 error) *Repositoryauth_AuthCodeByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositoryauth_AuthCodeByUser_Call) RunAndReturn(run func(string, int) (*codesender.AuthCode, error)) *Repositoryauth_AuthCodeByUser_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0
func (_m *Repositoryauth) Delete(_a0 auth.Auth) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.Auth) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositoryauth_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repositoryauth_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 auth.Auth
func (_e *Repositoryauth_Expecter) Delete(_a0 interface{}) *Repositoryauth_Delete_Call {
	return &Repositoryauth_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *Repositoryauth_Delete_Call) Run(run func(_a0 auth.Auth)) *Repositoryauth_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(auth.Auth))
	})
	return _c
}

func (_c *Repositoryauth_Delete_Call) Return(_a0 error) *Repositoryauth_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositoryauth_Delete_Call) RunAndReturn(run func(auth.Auth) error) *Repositoryauth_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireTokenByUserId provides a mock function with given fields: userId
func (_m *Repositoryauth) ExpireTokenByUserId(userId int) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for ExpireTokenByUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositoryauth_ExpireTokenByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireTokenByUserId'
type Repositoryauth_ExpireTokenByUserId_Call struct {
	*mock.Call
}

// ExpireTokenByUserId is a helper method to define mock.On call
//   - userId int
func (_e *Repositoryauth_Expecter) ExpireTokenByUserId(userId interface{}) *Repositoryauth_ExpireTokenByUserId_Call {
	return &Repositoryauth_ExpireTokenByUserId_Call{Call: _e.mock.On("ExpireTokenByUserId", userId)}
}

func (_c *Repositoryauth_ExpireTokenByUserId_Call) Run(run func(userId int)) *Repositoryauth_ExpireTokenByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Repositoryauth_ExpireTokenByUserId_Call) Return(_a0 error) *Repositoryauth_ExpireTokenByUserId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositoryauth_ExpireTokenByUserId_Call) RunAndReturn(run func(int) error) *Repositoryauth_ExpireTokenByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *Repositoryauth) GetAll() ([]auth.Auth, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []auth.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]auth.Auth, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []auth.Auth); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]auth.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositoryauth_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Repositoryauth_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *Repositoryauth_Expecter) GetAll() *Repositoryauth_GetAll_Call {
	return &Repositoryauth_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *Repositoryauth_GetAll_Call) Run(run func()) *Repositoryauth_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repositoryauth_GetAll_Call) Return(_a0 []auth.Auth, _a1 error) *Repositoryauth_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositoryauth_GetAll_Call) RunAndReturn(run func() ([]auth.Auth, error)) *Repositoryauth_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByHash provides a mock function with given fields: hash
func (_m *Repositoryauth) GetByHash(hash string) (auth.Auth, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for GetByHash")
	}

	var r0 auth.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (auth.Auth, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) auth.Auth); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(auth.Auth)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositoryauth_GetByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByHash'
type Repositoryauth_GetByHash_Call struct {
	*mock.Call
}

// GetByHash is a helper method to define mock.On call
//   - hash string
func (_e *Repositoryauth_Expecter) GetByHash(hash interface{}) *Repositoryauth_GetByHash_Call {
	return &Repositoryauth_GetByHash_Call{Call: _e.mock.On("GetByHash", hash)}
}

func (_c *Repositoryauth_GetByHash_Call) Run(run func(hash string)) *Repositoryauth_GetByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repositoryauth_GetByHash_Call) Return(_a0 auth.Auth, _a1 error) *Repositoryauth_GetByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositoryauth_GetByHash_Call) RunAndReturn(run func(string) (auth.Auth, error)) *Repositoryauth_GetByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *Repositoryauth) GetById(id int) (*auth.Auth, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *auth.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*auth.Auth, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *auth.Auth); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repositoryauth_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type Repositoryauth_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id int
func (_e *Repositoryauth_Expecter) GetById(id interface{}) *Repositoryauth_GetById_Call {
	return &Repositoryauth_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *Repositoryauth_GetById_Call) Run(run func(id int)) *Repositoryauth_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Repositoryauth_GetById_Call) Return(_a0 *auth.Auth, _a1 error) *Repositoryauth_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repositoryauth_GetById_Call) RunAndReturn(run func(int) (*auth.Auth, error)) *Repositoryauth_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *Repositoryauth) Update(_a0 auth.Auth) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.Auth) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repositoryauth_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repositoryauth_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 auth.Auth
func (_e *Repositoryauth_Expecter) Update(_a0 interface{}) *Repositoryauth_Update_Call {
	return &Repositoryauth_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *Repositoryauth_Update_Call) Run(run func(_a0 auth.Auth)) *Repositoryauth_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(auth.Auth))
	})
	return _c
}

func (_c *Repositoryauth_Update_Call) Return(_a0 error) *Repositoryauth_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repositoryauth_Update_Call) RunAndReturn(run func(auth.Auth) error) *Repositoryauth_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryauth creates a new instance of Repositoryauth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryauth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repositoryauth {
	mock := &Repositoryauth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
